"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};ko.observableHashtable=function(e){if(e=e||{},"object"!=("undefined"==typeof e?"undefined":_typeof(e)))throw new Error("The argument passed when initializing an observable hashtable must be an object, or null, or undefined.");var t=ko.observable({});return ko.utils.setPrototypeOfOrExtend(t,ko.observableHashtable.fn),t},ko.observableHashtable.fn={add:function(e,t){var r=this.peek(),o=!1;o=!r.hasOwnProperty(e)||r[e]!==t,o&&(r[e]=t,this.valueHasMutated())},clear:function(){var e=this.peek(),t=!this._isEmtpyObject();t&&this.valueWillMutate();for(var r in e)e.hasOwnProperty(r)&&delete e[r];this.valueHasMutated()},containsKey:function(e){var t=this.peek();return t.hasOwnProperty(e)},remove:function(e){var t=this.peek(),r=null;return t.hasOwnProperty(e)&&(r=t[e],delete t[e],this.valueHasMutated()),r},destroy:function(e){var t=this.peek();t.hasOwnProperty(e)&&(t[e]._destroy=!0,this.valueHasMutated()),this.valueHasMutated()},destroyAll:function(e){var t=this.peek(),r=!this._isEmtpyObject();r&&this.valueWillMutate();for(var o in t)t.hasOwnProperty(o)&&(t[o]._destroy=!0);this.valueHasMutated()},keys:function(){var e=this.peek(),t=Object.keys||function(e){if(e!==Object(e))throw new TypeError("Object.keys called on non-object");var t,r=[];for(t in e)Object.prototype.hasOwnProperty.call(e,t)&&r.push(t);return r};return t(e)},values:function e(){var t=this.peek(),r=this.keys(),e=[],o=!0,a=!1,n=void 0;try{for(var s,i=r[Symbol.iterator]();!(o=(s=i.next()).done);o=!0){var u=s.value;e.push(t[u])}}catch(e){a=!0,n=e}finally{try{!o&&i.return&&i.return()}finally{if(a)throw n}}return e},_isEmptyObject:function(){var e=this.peek(),t=Object.getOwnPropertyNames||function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);return t};return 0===t(e).length}},ko.utils.canSetPrototype&&ko.utils.setPrototypeOf(ko.observableHashtable.fn,ko.observable.fn),ko.exportSymbol("observableHashtable",ko.observableHashtable);